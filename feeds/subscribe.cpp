
/****************************************************************************
**
** This code was generated by a code generator based on imatix/gsl
** Any changes in this code will be lost.
**
****************************************************************************/
#include "subscribe.h"
#include "debughelper.h"

using namespace nzmqt;

namespace feeds {

/** Generic Subscribe implementation */
Subscribe::Subscribe(QObject *parent) :
    QObject(parent),
    m_ready(false),
    m_debugName("Subscribe"),
    m_socketUri(""),
    m_context(nullptr),
    m_socket(nullptr),
    m_state(Down),
    m_previousState(Down),
    m_errorString("")
{

    //m_heartbeatTimer->setSingleShot(true);
    //connect(m_heartbeatTimer, &QTimer::timeout, this, &Subscribe::heartbeatTimerTick);
    // state machine
    connect(this, &Subscribe::fsmDownStart,
            this, &Subscribe::fsmDownStartEvent);

    connect(this, &Subscribe::fsmTryingFullUpdateReceived,
            this, &Subscribe::fsmTryingFullUpdateReceivedEvent);

    connect(this, &Subscribe::fsmTryingStop,
            this, &Subscribe::fsmTryingStopEvent);

    connect(this, &Subscribe::fsmUpAnyMsgReceived,
            this, &Subscribe::fsmUpAnyMsgReceivedEvent);

    connect(this, &Subscribe::fsmUpStop,
            this, &Subscribe::fsmUpStopEvent);

    m_context = new PollingZMQContext(this, 1);
    connect(m_context, &PollingZMQContext::pollError,
            this, &Subscribe::socketError);
    m_context->start();
}

Subscribe::~Subscribe()
{
    stopSocket();

    if (m_context != nullptr)
    {
        m_context->stop();
        m_context->deleteLater();
        m_context = nullptr;
    }
}

/** Add a topic that should be subscribed **/
void Subscribe::addSocketTopic(const QString &name)
{
    m_socketTopics.insert(name);
}

/** Removes a topic from the list of topics that should be subscribed **/
void Subscribe::removeSocketTopic(const QString &name)
{
    m_socketTopics.remove(name);
}

/** Clears the the topics that should be subscribed **/
void Subscribe::clearSocketTopics()
{
    m_socketTopics.clear();
}

/** Connects the 0MQ sockets */
bool Subscribe::startSocket()
{
    m_socket = m_context->createSocket(ZMQSocket::TYP_SUB, this);
    m_socket->setLinger(0);
    foreach(QString topic, m_socketTopics)
    {
        m_socket->subscribeTo(topic.toLocal8Bit());
    }

    try {
        m_socket->connectTo(m_socketUri);
    }
    catch (const zmq::error_t &e) {
        QString errorString;
        errorString = QString("Error %1: ").arg(e.num()) + QString(e.what());
        //updateState(SocketError, errorString); TODO
        return false;
    }

    connect(m_socket, &ZMQSocket::messageReceived,
            this, &Subscribe::processSocketMessage);

#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "sockets connected" << m_socketUri);
#endif

    return true;
}

/** Disconnects the 0MQ sockets */
void Subscribe::stopSocket()
{
    if (m_socket != nullptr)
    {
        m_socket->close();
        m_socket->deleteLater();
        m_socket = nullptr;
    }
}

/** Processes all message received on socket */
void Subscribe::processSocketMessage(const QList<QByteArray> &messageList)
{
    QByteArray topic;

    if (messageList.length() < 2)  // in case we received insufficient data
    {
        return;
    }

    // we only handle the first two messges
    topic = messageList.at(0);
    //rx.ParseFromArray(messageList.at(1).data(), messageList.at(1).size());
    emit socketMessageReceived(topic, messageList.at(1));
    const QString &name ="fx";
    emit socketMessageReceived2();

#ifdef QT_DEBUG
    std::string s;
//    gpb::TextFormat::PrintToString(rx, &s);
    s = messageList.at(1).data();
    DEBUG_TAG(3, m_debugName, "server message" << QString::fromStdString(s));
#endif

    // react to any incoming message

    if (m_state == Up)
    {
        emit fsmUpAnyMsgReceived(QPrivateSignal());
    }



}

void Subscribe::socketError(int errorNum, const QString &errorMsg)
{
    QString errorString;
    errorString = QString("Error %1: ").arg(errorNum) + errorMsg;
    //updateState(SocketError, errorString);  TODO
}

void Subscribe::fsmDown()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
    m_state = Down;
    emit stateChanged(m_state);
}

void Subscribe::fsmDownStartEvent()
{
    if (m_state == Down)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event START");
#endif
        // handle state change
        emit fsmDownExited(QPrivateSignal());
        fsmTrying();
        emit fsmTryingEntered(QPrivateSignal());
        // execute actions
        startSocket();
     }
}

void Subscribe::fsmTrying()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State TRYING");
#endif
    m_state = Trying;
    emit stateChanged(m_state);
}

void Subscribe::fsmTryingFullUpdateReceivedEvent()
{
    if (m_state == Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event FULL UPDATE RECEIVED");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions

     }
}

void Subscribe::fsmTryingStopEvent()
{
    if (m_state == Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event STOP");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        //stopHeartbeatTimer();
        stopSocket();
     }
}

void Subscribe::fsmUp()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State UP");
#endif
    m_state = Up;
    emit stateChanged(m_state);
}

void Subscribe::fsmUpAnyMsgReceivedEvent()
{
    if (m_state == Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event ANY MSG RECEIVED");
#endif
        // execute actions

     }
}

void Subscribe::fsmUpStopEvent()
{
    if (m_state == Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event STOP");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions

        stopSocket();
     }
}

/** start trigger function */
void Subscribe::start()
{
    if (m_state == Down) {
        emit fsmDownStart(QPrivateSignal());
    }
}

/** stop trigger function */
void Subscribe::stop()
{
    if (m_state == Trying) {
        emit fsmTryingStop(QPrivateSignal());
    }
    if (m_state == Up) {
        emit fsmUpStop(QPrivateSignal());
    }
}
}; // namespace machinetalk
